/* tslint:disable */
// generated by typescript-json-validator
import Ajv, * as AJV from 'ajv';
import addFormats from 'ajv-formats';
import { formatNames } from 'ajv-formats/dist/formats';
import { MyEnum, TypeA, TypeB, RequestA, RequestB } from '../../ComplexExample';
undefined;
export const ajv = new Ajv({ allErrors: true, coerceTypes: false, removeAdditional: false });
addFormats(ajv, { mode: 'fast', formats: formatNames, keywords: true });
ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

export { MyEnum, TypeA, TypeB, RequestA, RequestB };
export const Schema = {
	$schema: 'http://json-schema.org/draft-07/schema#',
	definitions: {
		MyEnum: {
			enum: [0, 1, 2],
			type: 'number',
		},
		RequestA: {
			properties: {
				body: {
					$ref: '#/definitions/TypeB',
				},
				params: {
					properties: {
						e: {
							$ref: '#/definitions/MyEnum',
						},
					},
					required: ['e'],
					type: 'object',
				},
				query: {
					$ref: '#/definitions/TypeA',
				},
			},
			required: ['body', 'params', 'query'],
			type: 'object',
		},
		RequestB: {
			properties: {
				query: {
					$ref: '#/definitions/TypeA',
				},
			},
			required: ['query'],
			type: 'object',
		},
		TypeA: {
			properties: {
				id: {
					type: 'number',
				},
				value: {
					type: 'string',
				},
			},
			required: ['id', 'value'],
			type: 'object',
		},
		TypeB: {
			properties: {
				id: {
					type: ['null', 'number'],
				},
				value: {
					format: 'date-time',
					type: ['null', 'string'],
				},
			},
			required: ['id', 'value'],
			type: 'object',
		},
	},
};
ajv.addSchema(Schema, 'Schema');
export type ValidateFunction<T> = ((data: unknown) => data is T) & Pick<AJV.ValidateFunction, 'errors'>;
export type AllowedTypeNames = 'MyEnum' | 'TypeA' | 'TypeB' | 'RequestA' | 'RequestB';
export type AllowedTypes = MyEnum | TypeA | TypeB | RequestA | RequestB;
export function validate(typeName: 'MyEnum'): (value: unknown) => MyEnum;
export function validate(typeName: 'TypeA'): (value: unknown) => TypeA;
export function validate(typeName: 'TypeB'): (value: unknown) => TypeB;
export function validate(typeName: 'RequestA'): (value: unknown) => RequestA;
export function validate(typeName: 'RequestB'): (value: unknown) => RequestB;
export function validate(typeName: AllowedTypeNames): (value: unknown) => any;
export function validate(typeName: string): (value: unknown) => any {
	const validator: any = ajv.getSchema(`Schema#/definitions/${typeName}`);
	return (value: unknown): any => {
		if (!validator) {
			throw new Error(`No validator defined for Schema#/definitions/${typeName}`);
		}

		const valid = validator(value);

		if (!valid) {
			throw new Error(
				'Invalid ' +
					typeName +
					': ' +
					ajv.errorsText(
						validator.errors!.filter((e: any) => e.keyword !== 'if'),
						{ dataVar: typeName },
					),
			);
		}

		return value as any;
	};
}
