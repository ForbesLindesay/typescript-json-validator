/* tslint:disable */
// generated by typescript-json-validator
import Ajv, * as AJV from 'ajv';
import addFormats from 'ajv-formats';
import { formatNames } from 'ajv-formats/dist/formats';
import { EntityTypes, EntityOne, EntityTwo, Entity, Value } from './DisjointUnionExample';
undefined;
export const ajv = new Ajv({
	allErrors: true,
	coerceTypes: false,
	removeAdditional: false,
	strict: false,
	strictNumbers: false,
	strictRequired: false,
	strictSchema: false,
	strictTuples: false,
	strictTypes: false,
	useDefaults: true,
});
addFormats(ajv, { mode: 'fast', formats: formatNames, keywords: true });
ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

export { EntityTypes, EntityOne, EntityTwo, Entity, Value };
export const Schema = {
	$schema: 'http://json-schema.org/draft-07/schema#',
	definitions: {
		Entity: {
			else: {
				else: {
					else: {
						properties: {
							type: {
								enum: ['TypeThree'],
								type: 'string',
							},
						},
						required: ['type'],
					},
					if: {
						properties: {
							type: {
								enum: ['TypeThree'],
								type: 'string',
							},
						},
						required: ['type'],
					},
					then: {
						defaultProperties: [],
						properties: {
							baz: {
								type: 'integer',
							},
							type: {
								enum: ['TypeThree'],
								type: 'string',
							},
						},
						required: ['baz', 'type'],
						type: 'object',
					},
				},
				if: {
					properties: {
						type: {
							enum: [null],
							type: 'string',
						},
					},
					required: ['type'],
				},
				then: {
					$ref: '#/definitions/EntityTwo',
				},
			},
			if: {
				properties: {
					type: {
						enum: [null],
						type: 'string',
					},
				},
				required: ['type'],
			},
			then: {
				$ref: '#/definitions/EntityOne',
			},
		},
		EntityOne: {
			defaultProperties: [],
			properties: {
				foo: {
					type: 'string',
				},
				type: {
					enum: ['TypeOne'],
					type: 'string',
				},
			},
			required: ['foo', 'type'],
			type: 'object',
		},
		EntityTwo: {
			defaultProperties: [],
			properties: {
				bar: {
					type: 'string',
				},
				type: {
					enum: ['TypeTwo'],
					type: 'string',
				},
			},
			required: ['bar', 'type'],
			type: 'object',
		},
		EntityTypes: {
			enum: ['TypeOne', 'TypeThree', 'TypeTwo'],
			type: 'string',
		},
		Value: {
			anyOf: [
				{
					defaultProperties: [],
					properties: {
						foo: {
							type: 'string',
						},
						number: {
							enum: [0],
							type: 'number',
						},
					},
					required: ['foo', 'number'],
					type: 'object',
				},
				{
					defaultProperties: [],
					properties: {
						bar: {
							type: 'string',
						},
						number: {
							enum: [1],
							type: 'number',
						},
					},
					required: ['bar', 'number'],
					type: 'object',
				},
				{
					defaultProperties: [],
					properties: {
						baz: {
							type: 'string',
						},
						number: {
							enum: [2],
							type: 'number',
						},
					},
					required: ['baz', 'number'],
					type: 'object',
				},
			],
		},
	},
};
ajv.addSchema(Schema, 'Schema');
export type ValidateFunction<T> = ((data: unknown) => data is T) & Pick<AJV.ValidateFunction, 'errors'>;
export type AllowedTypeNames = 'EntityTypes' | 'EntityOne' | 'EntityTwo' | 'Entity' | 'Value';
export type AllowedTypes = EntityTypes | EntityOne | EntityTwo | Entity | Value;
export function validate(typeName: 'EntityTypes'): (value: unknown) => EntityTypes;
export function validate(typeName: 'EntityOne'): (value: unknown) => EntityOne;
export function validate(typeName: 'EntityTwo'): (value: unknown) => EntityTwo;
export function validate(typeName: 'Entity'): (value: unknown) => Entity;
export function validate(typeName: 'Value'): (value: unknown) => Value;
export function validate(typeName: AllowedTypeNames): (value: unknown) => any;
export function validate(typeName: string): (value: unknown) => any {
	const validator: any = ajv.getSchema(`Schema#/definitions/${typeName}`);
	return (value: unknown): any => {
		if (!validator) {
			throw new Error(`No validator defined for Schema#/definitions/${typeName}`);
		}

		const valid = validator(value);

		if (!valid) {
			throw new Error(
				'Invalid ' +
					typeName +
					': ' +
					ajv.errorsText(
						validator.errors!.filter((e: any) => e.keyword !== 'if'),
						{ dataVar: typeName },
					),
			);
		}

		return value as any;
	};
}
